# 嘗試求n的階乘
# 遞歸簡單理解就是自己去引用自己
# 遞歸函數，在函數中自己調用自己
# 遞歸是解決問題的一種方式，它和循環很像
#   它的整體思想是，將一個問題分解為一個一個小問題，直到問題無法分解，再去解決問題
# 遞歸函數的兩個要件
# 1. 基線條件
#   - 問題可以被分解成的最小問題，當滿足基線條件時，遞歸就不在執行了
# 2. 遞歸條件
#   - 將問題繼續分解的條件

def factorial(n: int):
    if n > 1:
        # 遞歸條件
        return n*factorial(n-1)
    else:
        # 基線條件
        return 1

# 無窮遞歸，如果這個函數被調用，程序的內存會溢出，效果類似死循環
# def fn():
#   fn()

print(factorial(5))