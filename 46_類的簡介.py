# 什麼是對象
# 什麼是對象?
#  - 對象是內存中專們用來存儲數據的一塊區域
#  - 對象中可以存放各種數據(ex: int 、 bool、 代碼)
# 對象有三部分組成
#   1. 對象的標誌(id)
#   2. 對象的類型(type)
#   3. 對象的值(value)

# 面量對象(OOP)
# - Python是一門面向對象的語言
# - 所謂的面向對象的語言，簡單理解就是語言中的所有操作都是通過對象來進行的
# - 面向過程的編程語言
#      面向過程語言指的是將我們的程序的邏輯分解為一個一個步驟，通過對每個步驟的抽象，來完成程序
#      例子:
#           - 孩子上學
#               1. 媽媽起床
#               2. 媽媽上廁所
#               3. 媽媽洗漱
#               4  媽媽做早飯
#               5. 媽媽叫孩子起床
#               6. 孩子上廁所
#               7. 孩子洗漱
#               8. 孩子吃早餐
#               9. 孩子背著書包上學
# - 面向過程的編程思想將一個一個功能分解為一個一個小步驟
#     我們通過完成一個一個小步驟來完成一個程序
# - 這種編程方式，符合我們人類的思維，編寫起來相對比較簡單
# - 但這種方式編寫的代碼往往只適用一個功能，如果要在實現別的功能，往往要在重新編寫代碼，可複用性較低，並且難維護

# 面向對象的編程語言
#   - 面向對象的編程語言關注的是對象，而不關注過程
#   - 對於面向對象語言來說，一切都是對象
#     例子:
#         1. 孩他媽起床叫孩子上學
#   - 面向對象的編程思想，將所有的功能保存到對應的對象中
#       比如，媽媽功能保存到媽媽對象中，孩子功能保存到孩子對象中
#       要使用某個功能，直接找到對應的對象即可
#   - 這種方式編寫的代碼，比較容易閱讀，並且比較容易維護，容易複用
#   - 但這種編寫方式，不太符合常規思維，編寫起來稍微麻煩一點

# 簡單歸納一下，面向對象的思想
#  1. 找對象
#  2. 搞對象


# 類(class)
#  - 我們目前所學的對象，都是Python內置的對象
#  - 但是內置對象並不能滿足所有需求，所以我們在開發中經常需要自訂義一些對象
#  - 類，簡單理解就相當於一個圖紙，在程序中我們需要根據類來創建對象
#  - 類就對象的圖紙
#  - 我們也稱對象是類的實例(instance)
#  - 如果多個對象是通過一個類創建的，我們稱這廂對象是一類對象
#  - 像int() float() bool() str() list() dict()....這些都是類
#  a = int(10)  #  創建一個int類的實例，等價於a = 10
#  我們自訂義的類都需要使用大寫字母開頭，使用大駝峰命名法(帕斯卡命名法)來對類命名

# 定義一個簡單的類
# 使用class關鍵字來定義類，語法和函數很像
# 語法:
#   class 類名([父類]):
#       代碼塊
class MyClass():
    pass

print(MyClass)

# 使用MyClass來創建一個對象
# 使用類來創建對象，就像調用一個函數一樣
mc = MyClass()    # mc就是通過MyClass創建的對象，mc就是MyClass的實例
mc2 = MyClass()
mc3 = MyClass()
mc4 = MyClass()
# mc mc2 mc3 mc4都是MyClass的實例，他們都是一類對象
print(mc)

# isinstance()用來檢查一個對象是否是一個類的實例
print(isinstance(mc, MyClass))

# 類也是一個對象!
# 類就是一個用來創建對象的對象
# 類是一個type類的對象，定義類實際上就是定義了一個type類型的對象
print('id=', id(MyClass))
print('type=', type(MyClass))

# 現在我們通過MyClass這個類創建對象都是一個空對象
# 也就是對象中實際上什麼都沒有，就相當於是一個空盒子
# 可以向對象中添加變量，對象中的變量我們稱為屬性
# 語法: 對象.屬性名 = 屬性值
mc.name = '孫悟空'
print(mc.name)
# print(mc2.name)
