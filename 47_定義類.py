# 類的定義
#   - 類和對象都是對現實生活中或程序中的內容進行抽象
#   - 實際上所有事物都由兩部份組成
#     1. 數據(屬性)
#     2. 行為(方法)

# 嘗試定義一個表示人的類
class Person:
    # 在類的代碼塊中，我們可以定義變量和函數
    # 在類中我們定義的變量，將會成為所有實例的公共屬性
    # 所有實例都可以訪問這些變量
    name = 'swk'    # 公共屬性，所以有的實例都可以訪問

    # 在類中也可以定義函數，類中定義的函數，我們稱為方法
    # 這些方法可以通過該類的所有實例來訪問
    def say_hello(self):
        # *方法每次調用時，解析器都會自動傳遞第一個實參
        # print(a)
        #   第一個參數，就是調用方法的對象本身
        #   如果是p1調的，則第一個參數就是p1對象
        #   如果是p2調的，則第一個參數就是p2對象
        # 一般我們都會將這個參數命名為self

        # say_hello()這個方法，可以顯示如下格式數據:
        # 你好! 我是xxx
        # 在方法中不能直接訪問類中的屬性
        # print(f'你好!我是{name}')
        print(f'你好!我是{self.name}')


# 創建Person的實例
p1 = Person()
p1.name = '豬八戒'
# 調用方法，對象.方法名()
# 方法調用和函數調用區別
# 如果是函數調用，則調用時傳幾個參數，就會有幾個實參
# 如果是方法調用，默認會傳遞一個參數，所以方法中至少要定義一個形參
p1.say_hello()
print(p1.name)
p2 = Person()
print(p2.name)

# 在類的代碼塊中，我們可以定義變量和函數
#   變量會成為該類實例的公共屬性，該類所有的實例都可以通過 "對象.屬性名" 來訪問這個公共屬性
#   函數會成為該類實例的公共方法，所有該類的實例都可以通過 "對象.方法名()" 來調用這個方法
# 注意:
#   *如果是方法調用時，默認會傳遞一個參數，所以方法中至少要定義一個形參

# 實例為什麼能訪問到類中的屬性和方法
#   類中定義的屬性和方法都是公共的，任何該類的實例都可以訪問
#   - 屬性和方法查找的流程
#      當我們調用一個對象的屬性時，解析器會先在當前對象中尋找是否含有該屬性，
#        如果有，則直接返回當前對象的屬性值，
#        如果沒有，則去當前對象的類對象中查找，如果有則返回類對象的屬性值
#        如果沒有則報錯
#   - 類對象和實例對象都可以保存屬性和方法
#       如果這個屬性和方法是所有實例共享的，則應該將其保存到類對象中
#       如果這個屬性和方法是某個實例獨有的，則應該保存到該實例對象
#   - 一般情況下，屬性保存到實例對象
#        而方法需要保存到類對象
p1.name = '豬八戒'
p2.name = '孫悟空'
# del p2.name
print(p1.name)
print(p2.name)
p1.say_hello()  # 你好!我是豬八戒
p2.say_hello()  # 你好!我是孫悟空

