# 作用域(scope)
# 作用域是指變量生效的區域
b = 20  # 全局變量


def fn():
    a = 10  # a定義在函數內部，所以它的作用域就是函數內部，函數外部無法訪問
    print('函數內部:a=', a)
    print('函數內部:b=', b)


fn()
# print('函數外部:a=', a)
print('函術外部:b=', b)

# Python中一共有兩種作用域
# 全局作用域
#   - 全局作用域在程序執行時創建，在程序結束時銷毀
#   - 所有函數以外的區域都是全局作用域
#   - 在全局做作用域中定義的變量，都屬於全局變量，全局變量可以在程序任何位置被訪問
# 函數作用域
#   - 函數作用域在函數執行時創建，在函數結束時銷毀
#   - 函數每次調用就會產生一個新的函數作用域
#   - 在函數作用域中定義的變量，都是局部變量，它只能在函數內部訪問

# 變量的查找
#  - 當我們使用變量時，會優先在當前作用域中尋找該變量，如果有則使用
#      如果沒有則去上一級作用域中尋找，如果有則使用
#      如果依然沒有則繼續去上一級作用域中尋找，依此類推
#      直到找到全局作用域，依然沒有找到，則會拋出異常 NameError: name 'a' is not defined


def fn2():
    # a = 30
    def fn3():
        # a = 40
        print('fn3中:a=', a)
    fn3()

# fn2()

a = 20
def fn3():
    # a = 10  # 在函數中為變量賦值時，默認都是為局部變量賦值
    # 如果需要在函數內部修改全局變量，則需要使用global關鍵字，來聲明變量
    # 聲明在函數內部的a為全局變量，此時在去修改a時，就是修改全局的a
    global a
    a = 30
    print('函數內部a=', a)

fn3()
print('函數外部a=', a)
# 命名空間(namespace)
# 命名空間是指變量儲存的位置，每個變量都需要存儲到指定的命名空間中
# 每個作用域都會有一個它對應的命名空間
# 全局命名空間，用來保存全局變量。函數命名空間用來保存函數中變量
# 命名空間實際上就是一個字典。是一個專門用來儲存變量的字典

# locals()用來獲取當前作用域的命名空間
# 如果在全局作用域中調用local()，則獲取全局命名空間
# 如果在函數作用域中調用locals()，則獲取函數命名空間
# 返回的是一個字典
scope = locals()    # 當前命名空間
print(scope)
scope['c'] = 1000   # 向字典中添加key-value就相當於在全局中創建了一個變量(一般不建議這麼用)
# print(c)


def fn4():
    a = 10
    # scope =locals()
    # scope['b'] = 100    # 在函數內部調用locals()會獲取到函數的命名空間
    # print(scope)        # 可以直接操作命名空間，但不建議這麼做

    # globals()函數可以在任意位置獲取全局命名空間
    global_scope = globals()
    print(global_scope)
    # print(b)
    # print(scope['b'])

fn4()

